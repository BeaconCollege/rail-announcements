import React from 'react'

import StationAnnouncementSystem from '@announcement-data/StationAnnouncementSystem'
import CallingAtSelector from '@components/CallingAtSelector'
import CustomAnnouncementPane, { ICustomAnnouncementPreset } from '@components/PanelPanes/CustomAnnouncementPane'
import CustomButtonPane from '@components/PanelPanes/CustomButtonPane'
import { AllStationsTitleValueMap } from '@data/StationManipulators'
import { AudioItem, CustomAnnouncementTab } from '../../AnnouncementSystem'
import crsToStationItemMapper from '@helpers/crsToStationItemMapper'
import AtosDisruptionAlternatives, { IAlternativeServicesState } from '@components/AtosDisruptionAlternatives'
import createAnnouncementButton from '@helpers/createAnnouncementButton'
import { nanoid } from 'nanoid'

interface INextTrainAnnouncementOptions {
  platform: string
  hour: string
  min: string
  toc: string
  terminatingStationCode: string
  via: string | 'none'
  callingAt: { crsCode: string; name: string; randomId: string }[]
  coaches: string
  seating: string
  special: string[]
  transportType: (typeof AVAILABLE_TRANSPORT)[number]
}

interface IThroughTrainAnnouncementOptions {
  transportType: (typeof AVAILABLE_TRANSPORT)[number]
  platform: string
}

interface IDelayedTrainAnnouncementOptions {
  hour: string
  min: string
  toc: string
  terminatingStationCode: string
  via: string | 'none'
  delayTime: string
  disruptionReason: string
  disruptionType: 'delayed' | 'cancelled'
  platform: string
  alternativeServices: IAlternativeServicesState
}

const AVAILABLE_TRANSPORT = ['train', 'bus', 'taxi'] as const

const AVAILABLE_HOURS = Array.from({ length: 24 }, (_, i) => i.toString().padStart(2, '0'))
const AVAILABLE_MINUTES = Array.from({ length: 59 }, (_, i) => i.toString().padStart(2, '0'))
const AVAILABLE_TOCS = [
  'Arriva Trains Wales',
  'Caledonian Sleeper',
  'Central Trains',
  'Chiltern Railways',
  'Citylink',
  'Connex',
  'CrossCountry',
  'East Midlands Trains',
  'First Capital Connect',
  'First Great Western Link',
  'First Great Western',
  'First North Western',
  'Gatwick Express',
  'Govia',
  'London Midland',
  'London Overground',
  'London Underground',
  'Meridian',
  'Merseyrail electrics',
  'Midland express',
  'Midland mainline',
  'New southern railway',
  'Northern',
  'Railtrack',
  'Scotrail Railways',
  'Silverlink',
  'South Central',
  'Southeastern',
  'Southern Rail',
  'Southern',
  'Stansted Express',
  'Thameslink',
  'Transpennine Express',
  'Virgin Pendolino',
  'Virgin Trains',
  'Virgin Voyager',
  'Virgin',
  'Wessex',
  'Wrexham and Shropshire',
]

const AVAILABLE_DELAY_TIMES = Array.from({ length: 111 }, (_, i) => i + 1)

// 2 to 12
const AVAILABLE_COACHES_CARRIAGES = Array.from({ length: 10 }, (_, i) => i + 2).reduce((acc, curr) => {
  acc.push(`${curr} coaches`)
  acc.push(`${curr} carriages`)
  return acc
}, [] as string[])

const AVAILABLE_PLATFORMS = Array.from({ length: 17 }, (_, i) => i + 1)
  .map(i => i.toString())
  .reduce((acc, curr) => {
    acc.push(curr)
    acc.push(`${curr}A`)
    acc.push(`${curr}B`)
    acc.push(`${curr}C`)
    acc.push(`${curr}D`)
    return acc
  }, [] as string[])
  .concat(['eastbound', 'westbound'])

const ADDITIONAL_LOCATIONS = [
  'outside the station, next to the level crossing',
  'outside the station',
  'the adjacent bus station',
  'the bottom of the station access road',
  'the bus interchange point',
  'the bus layby at the station entrance',
  'the bus station',
  'the bus stop by the level crossing',
  'the bus stop by the ticket office',
  'the coach bay',
  'the front of the station',
  'the main road',
  'the main station entrance',
  'the road by the station entrance',
  'the road passing over the level crossing',
  'the station approach road',
  'the station car park bus stop',
  'the station car park entrance',
  'the station car park',
  'the station entrance bus stop',
  'the station entrance',
  'the station forecourt bus stop',
  'the station forecourt, in front of the ticket office',
  'the station main entrance',
]

const STATIONS = [
  'AAP',
  'ABD',
  'ABH',
  'ABW',
  'ABY',
  'ACB',
  'ACC',
  'ACG',
  'ACK',
  'ACL',
  'ACR',
  'ADC',
  'ADD',
  'ADK',
  'ADL',
  'ADM',
  'AFK',
  'AFV',
  'AGL',
  // 'AGR', -- Closed 2019 so no longer in list of stations
  'AGT',
  'AGV',
  'AHD',
  'AHN',
  'AHS',
  'ALB',
  'ALD',
  // 'ALE',
  'ALF',
  'ALK',
  'ALM',
  'ALP',
  'ALT',
  'ALV',
  'AMB',
  'AML',
  'AMR',
  'AMY',
  'ANC',
  'ANG',
  'ANN',
  // 'ANY',
  'APB',
  'APD',
  'APF',
  'APG',
  'APP',
  'APS',
  'ARB',
  'ARL',
  'ARN',
  'ARR',
  'ART',
  'ARU',
  'ASC',
  'ASG',
  'ASH',
  // 'ASI',
  'ASK',
  'AST',
  'ASY',
  'ATB',
  'ATH',
  'ATL',
  'ATN',
  'AUD',
  'AUI',
  'AUK',
  'AUR',
  'AUW',
  'AVF',
  'AVM',
  'AVY',
  'AWK',
  'AWM',
  'AWT',
  'AYH',
  'AYL',
  'AYP',
  'AYS',
  'AYW',
  'BAA',
  'BAB',
  'BAD',
  'BAJ',
  'BAK',
  'BAL',
  'BAM',
  'BAN',
  'BAR',
  'BAT',
  'BAW',
  'BAY',
  'BBK',
  'BBL',
  'BBN',
  'BBS',
  'BBW',
  'BCB',
  'BCC',
  'BCF',
  'BCH',
  'BCS',
  'BCU',
  'BCV',
  'BCY',
  'BDA',
  'BDB',
  'BDH',
  'BDI',
  'BDK',
  'BDM',
  'BDQ',
  'BDS',
  'BDT',
  'BDY',
  'BEC',
  'BEE',
  'BEF',
  'BEG',
  'BEH',
  'BEM',
  'BEN',
  'BER',
  'BES',
  'BET',
  'BEV',
  'BEX',
  'BEY',
  'BFF',
  'BFR',
  'BGA',
  'BGE',
  'BGG',
  'BGH',
  'BGM',
  'BGN',
  'BHI',
  'BHK',
  'BHM',
  'BHO',
  'BHS',
  'BIF',
  'BIG',
  'BIK',
  'BIL',
  'BIN',
  'BIP',
  'BIS',
  'BIW',
  'BIY',
  // 'BJT',
  'BKA',
  'BKD',
  'BKG',
  'BKH',
  'BKJ',
  'BKL',
  'BKM',
  'BKS',
  'BKT',
  'BKW',
  'BLA',
  'BLE',
  'BLK',
  'BLM',
  'BLP',
  'BLV',
  'BLW',
  'BLX',
  'BLY',
  'BMB',
  'BMC',
  'BMD',
  'BMF',
  'BMG',
  'BMH',
  'BML',
  'BMN',
  'BMO',
  'BMS',
  'BMT',
  'BMV',
  'BNA',
  'BNC',
  'BND',
  'BNF',
  'BNG',
  'BNH',
  'BNM',
  'BNR',
  'BNT',
  'BNY',
  'BOA',
  'BOD',
  'BOG',
  'BOH',
  'BON',
  'BOP',
  'BOR',
  // 'BPC',
  'BPK',
  'BPN',
  'BPS',
  'BPW',
  'BRG',
  'BRH',
  'BRI',
  'BRK',
  'BRM',
  'BRO',
  'BRP',
  'BRR',
  'BRT',
  'BRU',
  'BRV',
  'BRX',
  'BRY',
  'BSB',
  'BSC',
  'BSD',
  'BSE',
  'BSH',
  'BSI',
  'BSJ',
  'BSK',
  'BSN',
  'BSO',
  'BSP',
  'BSR',
  'BSW',
  'BSY',
  'BTB',
  'BTD',
  'BTE',
  'BTF',
  'BTG',
  'BTH',
  'BTL',
  'BTN',
  'BTO',
  'BTR',
  'BTS',
  'BTY',
  'BUC',
  'BUD',
  'BUG',
  'BUH',
  'BUJ',
  'BUL',
  'BUO',
  'BUT',
  'BUW',
  'BUX',
  'BUY',
  'BVD',
  'BWB',
  'BWD',
  'BWK',
  'BWN',
  'BWO',
  'BWS',
  'BWT',
  'BXB',
  'BXD',
  'BXH',
  'BXW',
  'BXY',
  'BYB',
  'BYC',
  'BYD',
  'BYF',
  'BYI',
  'BYK',
  'BYL',
  'BYM',
  'BYN',
  'CAG',
  'CAK',
  'CAN',
  'CAO',
  'CAR',
  'CAS',
  'CBE',
  'CBG',
  'CBH',
  'CBL',
  'CBN',
  'CBR',
  'CBW',
  'CBY',
  'CCC',
  'CCH',
  'CDF',
  'CDN',
  'CDS',
  'CDT',
  'CDU',
  'CED',
  'CEF',
  'CEH',
  'CEL',
  'CES',
  'CEY',
  'CFB',
  'CFD',
  'CFH',
  'CFL',
  'CFO',
  'CFR',
  'CFT',
  'CGM',
  'CGN',
  'CHD',
  'CHE',
  'CHF',
  'CHG',
  'CHH',
  'CHI',
  'CHL',
  'CHM',
  'CHN',
  'CHO',
  'CHP',
  'CHR',
  'CHT',
  'CHU',
  'CHW',
  'CHX',
  'CIL',
  'CIR',
  'CIT',
  'CLA',
  'CLD',
  'CLE',
  'CLH',
  'CLI',
  'CLJ',
  'CLK',
  'CLL',
  'CLM',
  'CLN',
  'CLP',
  'CLR',
  'CLS',
  'CLU',
  'CLV',
  'CLW',
  'CLY',
  'CMD',
  'CME',
  'CMF',
  'CMN',
  'CMY',
  'CNE',
  'CNF',
  'CNG',
  'CNL',
  'CNM',
  'CNN',
  'CNO',
  'CNR',
  'CNS',
  // 'CNT',
  'CNW',
  'CNY',
  'COB',
  'COH',
  'COS',
  'COT',
  'COV',
  'CPK',
  'CPM',
  'CPT',
  'CPW',
  'CPY',
  'CRA',
  'CRD',
  'CRE',
  'CRG',
  'CRH',
  'CRI',
  'CRK',
  'CRL',
  'CRM',
  'CRN',
  'CRR',
  'CRS',
  'CRT',
  'CRV',
  'CRW',
  // 'CRX',
  'CRY',
  'CSA',
  'CSB',
  'CSH',
  'CSL',
  'CSR',
  'CSS',
  'CST',
  'CSW',
  'CSY',
  'CTF',
  'CTK',
  'CTL',
  'CTM',
  'CTN',
  'CTO',
  'CTR',
  'CTT',
  'CUD',
  'CUF',
  'CUH',
  'CUM',
  'CUP',
  'CUS',
  'CUW',
  'CUX',
  'CWB',
  'CWD',
  'CWE',
  'CWH',
  'CWL',
  'CWM',
  'CWN',
  'CWS',
  'CWU',
  'CYP',
  'CYT',
  'DAG',
  'DAM',
  'DAN',
  'DAR',
  'DBD',
  'DBG',
  'DBL',
  'DBR',
  'DBY',
  'DCH',
  'DCW',
  'DDG',
  'DDK',
  'DDP',
  'DEA',
  'DEE',
  'DEN',
  'DEP',
  'DEW',
  'DFD',
  'DFI',
  'DGC',
  'DGT',
  'DGY',
  'DHM',
  'DHN',
  'DID',
  'DIG',
  'DKD',
  'DKG',
  // 'DKR',
  'DKT',
  'DLH',
  'DLK',
  'DLM',
  'DLT',
  'DLW',
  'DMF',
  'DMH',
  'DMK',
  'DMP',
  'DMR',
  'DMS',
  'DNG',
  'DNL',
  'DNM',
  // 'DNN',
  'DNS',
  'DNT',
  'DOC',
  'DOD',
  'DON',
  'DOR',
  'DOW',
  'DPD',
  'DPT',
  'DRF',
  'DRM',
  'DRO',
  'DRT',
  'DSL',
  'DSM',
  'DSY',
  'DTG',
  'DTN',
  'DTW',
  'DUD',
  'DUL',
  'DUN',
  'DUR',
  'DVC',
  // 'DVG',
  'DVH',
  'DVN',
  'DVP',
  'DVY',
  'DWL',
  'DWN',
  'DWW',
  'DYC',
  'DYF',
  'DYP',
  'DZY',
  'EAG',
  'EAL',
  'EAR',
  'EBA',
  'EBK',
  'EBL',
  'EBN',
  'EBR',
  'EBT',
  'ECC',
  'ECL',
  'ECR',
  'ECS',
  'EDB',
  'EDG',
  'EDL',
  'EDN',
  'EDR',
  'EDW',
  'EDY',
  'EFF',
  'EFL',
  'EGF',
  'EGN',
  'EGR',
  'ELD',
  'ELE',
  'ELG',
  'ELO',
  'ELP',
  'ELR',
  'ELS',
  'ELW',
  'ELY',
  'EML',
  'EMP',
  'EMS',
  'ENC',
  'ENF',
  'ENL',
  'ENT',
  'EPD',
  'EPH',
  'EPS',
  'ERD',
  'ERH',
  'ERI',
  'ERL',
  'ESD',
  'ESL',
  'ESM',
  'ESW',
  'ETC',
  'ETL',
  // 'ETR',
  'EUS',
  'EVE',
  'EWD',
  'EWE',
  'EWR',
  'EXC',
  'EXD',
  'EXM',
  'EXN',
  'EXR',
  'EYN',
  'FAV',
  'FCN',
  'FEA',
  'FEN',
  'FFD',
  'FGH',
  'FGT',
  'FGW',
  'FIL',
  'FIN',
  'FIT',
  'FKC',
  'FKG',
  // 'FKH',
  // 'FKW',
  'FLF',
  'FLI',
  'FLN',
  // 'FLS',
  'FLT',
  'FLX',
  'FMR',
  'FNN',
  'FNR',
  'FNV',
  'FNW',
  'FNY',
  'FOD',
  'FOH',
  'FOK',
  'FOR',
  'FOX',
  'FPK',
  'FRB',
  'FRD',
  'FRF',
  'FRM',
  'FRO',
  'FRY',
  'FSB',
  'FSG',
  'FSK',
  'FST',
  'FTN',
  'FTW',
  'FXN',
  'FYS',
  'FZH',
  'FZW',
  'GBD',
  'GBK',
  'GBL',
  'GBS',
  'GCH',
  // 'GCL',
  'GCR',
  'GCT',
  'GDH',
  'GDL',
  'GDN',
  'GEA',
  'GER',
  'GGV',
  'GIG',
  'GIP',
  'GLC',
  'GLD',
  'GLE',
  'GLH',
  'GLM',
  'GLO',
  'GLQ',
  'GLY',
  'GLZ',
  'GMB',
  'GMD',
  'GMG',
  'GMN',
  'GMV',
  'GNB',
  'GNF',
  'GNH',
  'GNR',
  'GNW',
  'GOB',
  'GOE',
  'GOF',
  'GOM',
  'GOO',
  'GOR',
  'GOS',
  'GPK',
  'GPO',
  'GRA',
  'GRC',
  'GRF',
  'GRN',
  // 'GRO',
  'GRP',
  'GRV',
  'GRY',
  'GSD',
  'GSN',
  'GST',
  'GSW',
  'GSY',
  'GTH',
  'GTN',
  'GTO',
  'GTR',
  'GTW',
  'GTY',
  'GUI',
  'GUN',
  'GVH',
  'GWN',
  'GYM',
  'HAB',
  'HAC',
  'HAD',
  'HAF',
  'HAG',
  'HAI',
  'HAL',
  'HAN',
  'HAP',
  'HAS',
  'HAT',
  'HAV',
  'HAY',
  'HAZ',
  'HBB',
  'HBD',
  'HBN',
  'HBP',
  'HBY',
  'HCB',
  'HCH',
  'HCN',
  'HDF',
  'HDG',
  'HDH',
  'HDL',
  'HDM',
  'HDN',
  'HDW',
  'HDY',
  'HEC',
  'HED',
  'HEL',
  'HEN',
  'HES',
  'HEV',
  'HEW',
  'HFD',
  'HFE',
  'HFN',
  'HFS',
  // 'HFT',
  'HFX',
  'HGF',
  'HGM',
  'HGN',
  'HGR',
  'HGS',
  'HGT',
  'HGY',
  'HHD',
  'HHE',
  'HHY',
  'HIA',
  'HIB',
  'HID',
  'HIG',
  // 'HII',
  'HIN',
  'HIP',
  'HIR',
  'HIT',
  'HKC',
  'HKM',
  'HKN',
  'HKW',
  'HLB',
  'HLD',
  'HLG',
  'HLI',
  'HLN',
  'HLS',
  'HLU',
  'HMD',
  'HML',
  'HMM',
  'HMN',
  'HMT',
  'HNB',
  'HNF',
  'HNH',
  'HNK',
  'HNL',
  'HNT',
  'HNX',
  // 'HOD',
  'HOH',
  'HOP',
  'HOR',
  'HOV',
  'HOW',
  'HPA',
  'HPD',
  'HPL',
  'HPQ',
  'HRD',
  'HRH',
  'HRL',
  'HRM',
  'HRN',
  'HRS',
  'HRW',
  'HRY',
  'HSB',
  'HSC',
  'HSD',
  'HSG',
  'HSK',
  'HSL',
  'HSY',
  'HTC',
  'HTE',
  'HTH',
  'HTN',
  'HTY',
  'HUB',
  'HUD',
  'HUL',
  'HUN',
  'HUP',
  'HUR',
  // 'HUS',
  'HUT',
  'HUY',
  'HVF',
  'HVN',
  // 'HWA',
  'HWC',
  // 'HWE',
  'HWI',
  'HWM',
  // 'HWO',
  'HWW',
  'HWY',
  'HYB',
  'HYC',
  'HYD',
  'HYL',
  'HYM',
  'HYR',
  'HYS',
  'HYT',
  'IFI',
  'ILK',
  'IMW',
  'INC',
  'INE',
  'ING',
  'INK',
  'INR',
  'INS',
  'INT',
  'INV',
  'IPS',
  'IRL',
  'IVR',
  'JEQ',
  'JOH',
  'KBF',
  'KBK',
  'KBN',
  'KBW',
  'KCK',
  // 'KCM',
  'KDB',
  'KDG',
  'KEH',
  'KEI',
  'KEM',
  'KEN',
  'KET',
  'KEY',
  'KGE',
  'KGH',
  'KGL',
  'KGM',
  'KGS',
  'KGT',
  'KGX',
  'KID',
  'KIN',
  'KIR',
  'KIV',
  'KKB',
  'KKM',
  'KKN',
  'KKS',
  'KLM',
  'KLN',
  'KLY',
  'KMH',
  'KMK',
  'KML',
  'KMS',
  'KNA',
  'KND',
  'KNE',
  'KNF',
  'KNL',
  'KNN',
  'KNO',
  'KNR',
  'KNS',
  'KNT',
  'KPA',
  'KRK',
  'KSL',
  'KSN',
  'KSW',
  'KTH',
  'KTL',
  'KTN',
  'KTW',
  'KVP',
  'KWG',
  'KWL',
  'KYN',
  'LAC',
  'LAD',
  'LAG',
  'LAI',
  'LAK',
  // 'LAL',
  'LAM',
  'LAN',
  'LAS',
  'LAW',
  'LBG',
  'LBK',
  'LBO',
  'LBR',
  'LBZ',
  'LCK',
  'LCN',
  'LDN',
  'LDS',
  'LDY',
  'LEA',
  'LED',
  'LEE',
  'LEG',
  'LEH',
  'LEI',
  'LEN',
  'LEO',
  'LER',
  'LES',
  'LET',
  'LEU',
  'LEW',
  'LEY',
  'LFD',
  'LGD',
  'LGF',
  'LGG',
  'LGJ',
  'LGM',
  'LGN',
  'LGW',
  'LHD',
  'LHO',
  // 'LHR',
  'LHS',
  'LIC',
  'LID',
  'LIH',
  'LIT',
  'LIV',
  'LLA',
  'LLC',
  'LLD',
  'LLE',
  'LLF',
  'LLJ',
  'LLW',
  'LMS',
  'LND',
  'LNY',
  'LOB',
  'LOC',
  'LOF',
  'LOH',
  'LOS',
  'LOT',
  'LOW',
  'LPG',
  'LPR',
  'LPT',
  'LPW',
  'LPY',
  'LRD',
  'LSK',
  // 'LSP',
  'LSY',
  'LTG',
  'LTL',
  'LTM',
  'LTN',
  'LTP',
  'LTV',
  'LUA',
  // 'LUB',
  'LUD',
  'LUT',
  'LVJ',
  'LVM',
  'LVN',
  'LWH',
  'LWM',
  'LWS',
  'LWT',
  'LYC',
  'LYD',
  'LYE',
  'LYM',
  'LZB',
  // 'LZZ',
  'MAC',
  'MAI',
  'MAR',
  'MAT',
  'MAU',
  'MBR',
  'MCB',
  'MCE',
  'MCH',
  'MCM',
  'MCN',
  'MCO',
  'MCV',
  'MDB',
  'MDE',
  'MDL',
  'MDN',
  'MDS',
  'MDW',
  'MEC',
  'MEL',
  'MEN',
  'MEP',
  'MES',
  'MEW',
  'MEX',
  'MFA',
  'MFF',
  'MFH',
  'MFT',
  'MGM',
  'MGN',
  'MHM',
  'MHR',
  'MHS',
  'MIA',
  'MIH',
  'MIJ',
  'MIK',
  'MIL',
  'MIR',
  'MIS',
  'MKC',
  'MKR',
  'MLB',
  // 'MLC',
  'MLD',
  'MLH',
  'MLT',
  'MLY',
  'MMO',
  'MNC',
  'MNE',
  'MNN',
  'MOB',
  'MOG',
  'MON',
  'MOS',
  'MPL',
  'MPT',
  'MRB',
  'MRN',
  'MRP',
  'MSD',
  'MSH',
  'MSL',
  'MSN',
  'MSO',
  'MSR',
  'MSS',
  'MST',
  'MSW',
  'MTB',
  'MTG',
  'MTH',
  'MTM',
  'MTS',
  'MUB',
  'MUF',
  'MVL',
  'MYB',
  'MYT',
  'MZH',
  'NAN',
  'NAR',
  'NBA',
  'NBC',
  'NBR',
  'NCE',
  'NCK',
  'NCL',
  'NCM',
  'NCT',
  'NDL',
  'NEH',
  'NEL',
  'NET',
  'NFD',
  'NFL',
  'NFN',
  'NGT',
  'NHD',
  'NHE',
  // 'NHY',
  'NIT',
  'NLN',
  'NLS',
  'NLT',
  'NLW',
  'NMC',
  'NMK',
  'NMN',
  'NMP',
  'NMT',
  'NNG',
  'NOR',
  'NOT',
  'NPD',
  'NQU',
  'NQY',
  'NRB',
  'NRN',
  'NRW',
  'NSB',
  'NSD',
  'NSG',
  'NTA',
  'NTB',
  'NTH',
  'NTL',
  'NTN',
  'NTR',
  'NUF',
  'NUM',
  'NUN',
  'NUT',
  'NVH',
  'NVN',
  'NVR',
  'NWB',
  'NWD',
  'NWE',
  'NWI',
  'NWM',
  'NWN',
  'NWP',
  'NWR',
  'NWT',
  // 'NWW',
  'NWX',
  'NXG',
  'OCK',
  'OHL',
  'OKL',
  'OKM',
  'OKN',
  'OLD',
  'OLF',
  // 'OLM',
  'OLT',
  // 'OLW',
  'OLY',
  'ORE',
  'ORP',
  'ORR',
  'OTF',
  'OUN',
  'OUS',
  'OUT',
  'OXF',
  'OXN',
  'OXT',
  'PAD',
  'PAL',
  'PAN',
  'PAR',
  'PAT',
  'PBL',
  'PBO',
  'PBR',
  'PBY',
  'PCD',
  'PDG',
  'PDW',
  'PEA',
  'PEB',
  'PEG',
  'PEM',
  'PES',
  'PET',
  'PEV',
  'PFL',
  'PFM',
  'PFR',
  'PFY',
  'PGN',
  'PHG',
  'PHR',
  'PIT',
  'PKG',
  'PKT',
  'PLC',
  'PLD',
  'PLG',
  'PLM',
  'PLS',
  'PLU',
  'PLY',
  'PMB',
  'PMD',
  'PMH',
  'PMP',
  'PMR',
  'PMS',
  'PMW',
  'PNA',
  'PNC',
  'PNE',
  'PNL',
  'PNR',
  'PNS',
  'PNW',
  'PNZ',
  'POL',
  'PON',
  'POO',
  'POP',
  'POT',
  'PPL',
  'PRB',
  'PRE',
  'PRH',
  'PRP',
  'PRR',
  'PRS',
  'PRT',
  'PRY',
  'PSC',
  'PSE',
  'PSH',
  'PSN',
  'PST',
  'PSW',
  'PTA',
  'PTC',
  'PTH',
  'PTL',
  'PTM',
  'PUL',
  'PUO',
  'PUR',
  'PWL',
  'PWW',
  'PWY',
  'PYC',
  'PYL',
  'PYT',
  'QBR',
  'QPK',
  'QRP',
  'RAD',
  'RAI',
  'RAM',
  'RAN',
  'RAU',
  'RBR',
  'RCD',
  'RDC',
  'RDD',
  'RDF',
  'RDG',
  'RDH',
  'RDN',
  'RDS',
  'RDT',
  'REC',
  'RED',
  'REE',
  'REI',
  'RET',
  'RGL',
  'RGT',
  'RGW',
  'RHD',
  'RHL',
  'RHM',
  'RHO',
  'RIC',
  'RID',
  'RKT',
  'RMC',
  'RMD',
  'RMF',
  'RML',
  'RNF',
  'RNH',
  'RNM',
  'ROB',
  'ROL',
  'ROM',
  'ROO',
  'ROW',
  'RRB',
  'RSH',
  'RTR',
  'RUA',
  'RUE',
  'RUG',
  'RUN',
  'RUT',
  'RVB',
  'RVN',
  'RWC',
  'RYB',
  'RYE',
  'RYH',
  'RYN',
  'RYS',
  'SAA',
  'SAC',
  'SAD',
  'SAE',
  'SAF',
  'SAJ',
  'SAL',
  'SAM',
  'SAS',
  'SAT',
  'SAU',
  'SAV',
  'SAW',
  'SAX',
  'SAY',
  'SBE',
  'SBF',
  'SBJ',
  'SBM',
  'SBP',
  'SBT',
  'SBU',
  'SBV',
  'SBY',
  'SCA',
  'SCF',
  'SCG',
  'SCS',
  'SCU',
  'SCY',
  'SDA',
  'SDB',
  'SDF',
  'SDG',
  'SDH',
  'SDN',
  'SDR',
  'SDY',
  'SEA',
  'SEC',
  'SEE',
  'SEF',
  'SEG',
  'SEH',
  'SEM',
  'SEN',
  'SES',
  'SET',
  'SEV',
  'SFD',
  'SFN',
  'SFO',
  'SFR',
  'SGB',
  'SGL',
  'SGM',
  'SGR',
  // 'SHA',
  'SHB',
  'SHC',
  'SHE',
  'SHF',
  'SHJ',
  'SHR',
  'SHU',
  'SHY',
  'SIA',
  'SID',
  'SIE',
  'SIH',
  'SIL',
  'SIP',
  'SIT',
  'SJS',
  'SKE',
  'SKG',
  'SKI',
  'SKM',
  'SLD',
  'SLK',
  'SLL',
  'SLO',
  'SLQ',
  'SLR',
  'SLV',
  'SLW',
  'SLY',
  'SMA',
  'SMB',
  'SMD',
  'SMH',
  // 'SMI',
  'SMK',
  'SMO',
  'SMR',
  'SMT',
  'SMY',
  'SNA',
  'SND',
  'SNE',
  'SNF',
  'SNH',
  'SNI',
  'SNK',
  'SNN',
  'SNO',
  'SNR',
  'SNS',
  'SNT',
  // 'SNU',
  'SNW',
  'SOA',
  'SOB',
  'SOC',
  'SOE',
  'SOG',
  'SOH',
  'SOK',
  'SOL',
  'SOM',
  'SON',
  'SOO',
  'SOP',
  'SOR',
  'SOT',
  'SOU',
  'SOW',
  'SPA',
  'SPB',
  'SPF',
  'SPH',
  'SPK',
  'SPN',
  'SPO',
  'SPP',
  'SPT',
  'SPU',
  'SPY',
  'SQH',
  'SRA',
  'SRC',
  'SRD',
  'SRG',
  'SRH',
  'SRI',
  'SRL',
  'SRN',
  'SRO',
  'SRR',
  'SRS',
  'SRT',
  'SRU',
  'SRY',
  'SSD',
  'SSE',
  'SSM',
  'SSS',
  'SST',
  'STA',
  'STD',
  'STE',
  'STG',
  'STH',
  'STJ',
  'STK',
  'STL',
  'STN',
  'STO',
  'STP',
  'STS',
  'STT',
  'STU',
  'STY',
  'SUC',
  'SUD',
  'SUN',
  'SUO',
  'SUP',
  'SUT',
  // 'SVC',
  'SVG',
  'SVL',
  'SVR',
  'SVS',
  // 'SVW',
  'SWA',
  'SWD',
  'SWE',
  'SWI',
  'SWK',
  'SWL',
  'SWM',
  'SWN',
  'SWO',
  'SWR',
  'SWS',
  'SWT',
  'SXY',
  'SYA',
  'SYB',
  'SYD',
  'SYH',
  'SYS',
  'SYT',
  'TAB',
  'TAC',
  'TAD',
  // 'TAH',
  'TAL',
  'TAM',
  'TAP',
  'TAT',
  'TAU',
  'TBD',
  'TBW',
  'TBY',
  'TDU',
  'TEN',
  'TEO',
  'TEY',
  'TFC',
  'TGM',
  'THC',
  'THH',
  'THI',
  'THL',
  'THO',
  'THU',
  'THW',
  'TIL',
  'TIP',
  'TLB',
  'TLH',
  'TLK',
  'TNF',
  'TNN',
  'TNS',
  'TOD',
  'TOK',
  'TOM',
  'TON',
  'TOO',
  'TOP',
  'TOT',
  'TPB',
  'TPC',
  'TQY',
  'TRA',
  'TRI',
  'TRM',
  'TRO',
  'TRR',
  'TRS',
  'TRU',
  'TTF',
  'TTH',
  'TUH',
  'TUL',
  'TUR',
  'TUT',
  'TVP',
  'TWI',
  'TWY',
  'TYC',
  'TYG',
  'TYS',
  'TYW',
  'UCK',
  'UDD',
  'UHL',
  'ULL',
  'ULV',
  'UNI',
  'UPL',
  'UPM',
  'UPW',
  'URM',
  'UTT',
  'UTY',
  'UWL',
  // 'UXB',
  'VAL',
  'VIC',
  'WAC',
  'WAD',
  'WAE',
  'WAF',
  'WAM',
  'WAN',
  'WAR',
  'WAS',
  'WAT',
  'WAV',
  'WBC',
  'WBD',
  'WBL',
  'WBO',
  'WBP',
  'WBQ',
  'WBR',
  'WCB',
  'WCF',
  'WCM',
  // 'WCT',
  'WCX',
  'WCY',
  'WDB',
  'WDD',
  'WDE',
  'WDH',
  'WDM',
  'WDN',
  'WDO',
  'WDS',
  'WDT',
  'WDU',
  'WED',
  'WEH',
  'WEL',
  'WEM',
  'WES',
  'WET',
  'WEY',
  'WFH',
  'WFI',
  'WFJ',
  'WFL',
  'WFN',
  // 'WFW',
  'WGA',
  'WGC',
  'WGN',
  'WGW',
  'WHA',
  'WHC',
  'WHD',
  'WHE',
  'WHG',
  'WHI',
  'WHL',
  'WHN',
  'WHP',
  'WHR',
  'WHS',
  // 'WHX',
  'WHY',
  'WID',
  'WIH',
  'WIJ',
  'WIL',
  'WIM',
  'WIN',
  // 'WJH',
  'WKD',
  'WKF',
  'WKK',
  'WKM',
  'WLC',
  'WLD',
  'WLF',
  'WLN',
  'WLP',
  'WLS',
  'WLT',
  'WLY',
  'WMA',
  'WMB',
  'WMC',
  'WMD',
  'WME',
  'WMG',
  'WMI',
  'WML',
  'WMN',
  'WMR',
  'WMW',
  'WND',
  'WNE',
  'WNH',
  'WNM',
  'WNN',
  'WNP',
  'WNS',
  'WNW',
  'WNY',
  'WOF',
  'WOH',
  'WOK',
  'WOL',
  'WOM',
  'WOR',
  'WOS',
  'WRB',
  'WRE',
  'WRH',
  'WRK',
  'WRM',
  'WRP',
  'WRS',
  'WRU',
  'WRW',
  'WRX',
  'WSA',
  'WSB',
  'WSE',
  'WSF',
  'WSL',
  'WSM',
  'WSR',
  'WST',
  'WSU',
  'WSW',
  'WTA',
  'WTC',
  'WTE',
  'WTG',
  'WTI',
  'WTL',
  'WTM',
  'WTO',
  'WTR',
  'WTS',
  'WTT',
  'WVF',
  'WVH',
  'WWA',
  'WWD',
  'WWI',
  'WWL',
  'WWO',
  'WWR',
  'WWW',
  'WYE',
  'WYL',
  'WYT',
  // 'XCQ',
  // 'XDP',
  // 'XDW',
  // 'XEC',
  // 'XEI',
  // 'XEY',
  // 'XEZ',
  // 'XFB',
  // 'XFG',
  // 'XLB',
  // 'XMT',
  // 'XNE',
  // 'XSA',
  'YAE',
  'YAL',
  'YAT',
  'YET',
  'YRD',
  'YRK',
  'YRM',
  'YRT',
  'YVJ',
  'YVP',
  'ZFD',
]

const AVAILABLE_STATIONS = {
  low: STATIONS,
  high: STATIONS,
}

const AVAILABLE_DISRUPTION_REASONS = [
  'A broken down train',
  'A delay on a previous journey',
  'A derailed train',
  'A derailment',
  'A failure of level crossing apparatus',
  'A failure of line-side equipment',
  'A failure of signalling equipment',
  'A fallen tree',
  'A fatality',
  'A fault on a preceding train',
  'A fault on a river swing bridge',
  'A fire at a station earlier',
  'A fire at a station',
  'A fire',
  'A lack of suitable carriages',
  'A landslide',
  'A landslip',
  'A lightning strike',
  'A line-side fire',
  'A member of train crew being unavailable',
  'A passenger being taken ill earlier',
  'A passenger being taken ill',
  'A person being hit by a train',
  'A person hit by a train earlier',
  'A person hit by a train',
  'A points failure',
  'A problem at a level crossing',
  'A problem currently under investigation',
  'A problem near the railway',
  'A problem on property adjacent to the railway',
  'A problem with a river bridge',
  'A problem with line-side equipment',
  'A road vehicle damaging a level crossing',
  'A road vehicle striking a bridge',
  'A security alert',
  'A security incident adjacent to railway',
  'A shortage of available train crew',
  'A shortage of serviceable trains',
  'A slow running preceding train',
  'A temporary shortage of available train crew',
  'A temporary speed restriction',
  'A train derailed earlier',
  'A train failure',
  'A train fault',
  'A train late from the depot earlier',
  'A train late from the depot',
  'A trespass incident',
  'A vehicle striking a bridge earlier',
  'A vehicle striking a bridge',
  'A vehicle striking a railway bridge',
  'Activation of a fire alarm',
  'Additional passenger assistance on a preceding train',
  'Additional safety checks',
  'Adverse weather conditions',
  'An earlier broken down train',
  'An earlier failure of line-side equipment',
  'An earlier fatality',
  'An earlier fire',
  'An earlier landslip',
  'An earlier line-side fire',
  'An earlier operating incident',
  'An earlier problem at a level crossing',
  'An earlier problem near the railway',
  'An earlier problem with a river bridge',
  'An earlier problem with line-side equipment',
  'An earlier security alert',
  'An earlier train fault',
  'An earlier trespass incident',
  'An electrical fault on the line',
  'An external cause beyond our control',
  'An obstruction on the line earlier',
  'An obstruction on the line',
  'An obstruction on the overhead lines',
  'An operating incident',
  'An unsually large passenger flow earlier',
  'An unsually large passenger flow',
  'Animals on the line earlier',
  'Animals on the line',
  'Animals on the railway line',
  'Attending to a passenger taken ill',
  'Awaiting train crew due to earlier disruption',
  'Congestion caused by a failed train',
  'Congestion caused by earlier delays',
  'Congestion caused by slow running freight trains',
  'Damage caused to a tunnel',
  'Damaged electrical supplies',
  'Disruptive passengers earlier',
  'Disruptive passengers',
  'Earlier damage to the overhead lines',
  'Earlier electrical supply problems',
  'Earlier emergency engineering works',
  'Earlier industrial action',
  'Earlier operating difficulties',
  'Earlier overhead wire problems',
  'Earlier overrunning engineering works',
  'Earlier signalling problems',
  'Earlier vandalism',
  'Electrical supply problems',
  'Emergency engineering works',
  'Emergency services attending an incident',
  'Emergency services attending incident adjacent to the railway',
  'Emergency services dealing with a prior incident',
  'Emergency services dealing with an incident',
  'Engineering works',
  'Equipment failure',
  'Evacuation of a station earlier',
  'Fire alarms sounding at a station',
  'Fire alarms sounding earlier at a station',
  'Flooding earlier',
  'Flooding',
  'Fog earlier',
  'Fog',
  'High winds earlier',
  'High winds',
  'Industrial action by some staff',
  'Industrial action by staff',
  'Industrial action',
  'Late running of connecting trains',
  'Lightning having damaged equipment',
  'Overcrowding',
  'Overhead wire problems',
  'Overrunning engineering works',
  'Passengers transferring between trains earlier',
  'Passengers transferring between trains',
  'Planned engineering works',
  'Poor rail conditions earlier',
  'Poor rail conditions',
  'Poor weather conditions earlier',
  'Poor weather conditions',
  'Problems preparing the train for service',
  'Requiring security teams to attend a train',
  'Safety checks being made',
  'Safety checks having been made earlier',
  'Severe weather conditions',
  'Signalling problems',
  'Slippery rail conditions',
  'Snow earlier',
  'Snow',
  'Speed restrictions having been imposed',
  'Staff sickness',
  'The train being diverted',
  'The train being refuelled',
  'Track repairs taking place',
  'Train crew having been unavailable earlier',
  'Trespassers on the railway',
  'Vandalism affecting the railway',
  'Vandalism to rolling stock',
  'Vandalism',
  'Waiting earlier for a train crew member',
  'Waiting for a train crew member',
].sort()

const AVAILABLE_SEATING_AVAILABILITY = ['there are usually many seats available on this train']
const AVAILABLE_SPECIAL_REMARKS = [
  {
    title: 'Make sure you have the correct ticket',
    value: 'please make sure you have the correct ticket to travel on this service',
  },
  {
    title: 'GTR - You must wear a face covering',
    value: 'you must wear a face covering whilst on the station and on the train unless you are exempt',
  },
]

const AnnouncementPresets: Readonly<Record<string, ICustomAnnouncementPreset[]>> = {
  nextTrain: [
    {
      name: '07:11 | Brighton to Cambridge',
      state: {
        platform: '1',
        hour: '07',
        min: '11',
        toc: 'thameslink',
        terminatingStationCode: 'CBG',
        via: 'none',
        callingAt: ['HHE', 'BAB', 'TBD', 'GTW', 'ECR', 'LBG', 'BFR', 'CTK', 'ZFD', 'STP', 'FPK', 'SVG', 'HIT', 'LET', 'BDK', 'RYS'].map(
          crsToStationItemMapper,
        ),
        coaches: '12 coaches',
        seating: 'none',
        special: [],
        transportType: 'train',
      },
    },
    {
      name: '15:29 | Crawley to Peterborough',
      state: {
        platform: '3',
        hour: '15',
        min: '29',
        toc: 'thameslink',
        terminatingStationCode: 'PBO',
        via: 'none',
        callingAt: [
          'TBD',
          'GTW',
          'HOR',
          'RDH',
          'MHM',
          'CDS',
          'ECR',
          'LBG',
          'BFR',
          'CTK',
          'ZFD',
          'STP',
          'FPK',
          'SVG',
          'HIT',
          'ARL',
          'BIW',
          'SDY',
          'SNO',
          'HUN',
        ].map(crsToStationItemMapper),
        coaches: '12 coaches',
        seating: 'there are usually many seats available on this train',
        special: [],
        transportType: 'train',
      },
    },
    {
      name: '13:57 | HHE to LIT',
      state: {
        platform: '1',
        hour: '13',
        min: '57',
        toc: 'southern',
        terminatingStationCode: 'LIT',
        via: 'HOV',
        callingAt: ['BUG', 'HSK', 'PRP', 'HOV', 'PLD', 'SSE', 'LAC', 'WRH', 'WWO', 'DUR', 'GBS', 'ANG'].map(crsToStationItemMapper),
        coaches: '8 coaches',
        seating: 'none',
        special: [],
        transportType: 'train',
      },
    },
  ],

  disruptedTrain: [
    {
      name: '07:36 | BTN (+21m)',
      state: {
        hour: '07',
        min: '36',
        toc: 'thameslink',
        terminatingStationCode: 'BTN',
        via: 'none',
        disruptionType: 'delayed',
        delayTime: '21',
        disruptionReason: 'a failure of signalling equipment',
        platform: '2',
        alternativeServices: [
          {
            randomId: nanoid(),
            passengersFor: ['WVF'].map(crsToStationItemMapper),
            service: {
              hour: '07',
              minute: '33',
              terminatingCrs: 'EBN',
              via: 'LWS',
              platform: '2',
            },
          },
          {
            randomId: nanoid(),
            passengersFor: ['BUG', 'PRP'].map(crsToStationItemMapper),
            service: {
              hour: '07',
              minute: '40',
              terminatingCrs: 'LIT',
              via: 'HOV',
              platform: '2',
            },
          },
          {
            randomId: nanoid(),
            passengersFor: ['HSK'].map(crsToStationItemMapper),
            service: {
              hour: '07',
              minute: '57',
              terminatingCrs: 'BTN',
              via: 'none',
              platform: '2',
            },
          },
        ],
      },
    },
    {
      name: '16:38 | BTN (+61m)',
      state: {
        hour: '16',
        min: '38',
        toc: 'thameslink',
        terminatingStationCode: 'BTN',
        via: 'none',
        disruptionType: 'delayed',
        delayTime: '61',
        disruptionReason: 'emergency services dealing with an incident',
        platform: '1',
        alternativeServices: [
          {
            randomId: nanoid(),
            passengersFor: ['BUG'].map(crsToStationItemMapper),
            service: {
              hour: '16',
              minute: '21',
              terminatingCrs: 'BTN',
              via: 'none',
              platform: '2',
            },
          },
        ],
      },
    },
    {
      name: '08:33 to LIT cancelled',
      state: {
        hour: '08',
        min: '33',
        toc: 'southern',
        terminatingStationCode: 'LIT',
        via: 'HOV',
        disruptionType: 'cancelled',
        delayTime: 'unknown',
        disruptionReason: 'a road vehicle striking a bridge',
        platform: '2',
        alternativeServices: [
          {
            randomId: nanoid(),
            passengersFor: ['BUG', 'HSK'].map(crsToStationItemMapper),
            service: {
              hour: '08',
              minute: '36',
              terminatingCrs: 'BTN',
              via: 'none',
              platform: '2',
            },
          },
          {
            randomId: nanoid(),
            passengersFor: ['HOV', 'PLD', 'SSE', 'LAC', 'WRH', 'WWO', 'DUR', 'GBS', 'ANG'].map(crsToStationItemMapper),
            service: {
              hour: '09',
              minute: '33',
              terminatingCrs: 'LIT',
              via: 'HOV',
              platform: '2',
            },
          },
        ],
      },
    },
  ],
}

export default class AtosAnne extends StationAnnouncementSystem {
  readonly NAME = 'ATOS - Anne'
  readonly ID = 'ATOS_ANNE_V1'
  readonly FILE_PREFIX = 'station/atos/anne'
  readonly SYSTEM_TYPE = 'station'

  /**
   * @returns "Platform X for the HH:mm YYYYYY service to ZZZZ (via AAAA)."
   */
  private assembleTrainInfo({ hour, min, toc, via, terminatingStationCode, destAllHigh = false, delayStart = 0 }): AudioItem[] {
    const files: AudioItem[] = [
      { id: `times.hour.${hour}`, opts: { delayStart } },
      `times.mins.${min}`,
      {
        id: `tocs.${toc.toLowerCase()}`,
        opts: { delayStart: 75 },
      },
      `service to`,
    ]

    if (destAllHigh) {
      if (via !== 'none') {
        files.push(`stations.high.${terminatingStationCode}`, 'via', `stations.high.${via}`)
      } else {
        files.push(`stations.high.${terminatingStationCode}`)
      }
    } else {
      if (via !== 'none') {
        files.push(`stations.high.${terminatingStationCode}`, 'via', `stations.low.${via}`)
      } else {
        files.push(`stations.low.${terminatingStationCode}`)
      }
    }

    return files
  }

  private async playNextTrainAnnouncement(options: INextTrainAnnouncementOptions, download: boolean = false): Promise<void> {
    const files: AudioItem[] = []

    files.push(`platforms.high.${options.platform}`, 'for the')
    files.push(...this.assembleTrainInfo(options))

    files.push({ id: 'calling at', opts: { delayStart: 750 } })

    if (options.callingAt.length === 0) {
      files.push(`stations.high.${options.terminatingStationCode}`, 'only')
    } else {
      const callingAtStops = options.callingAt.map(stn => stn.crsCode)
      files.push(
        ...this.pluraliseAudio([...callingAtStops.map(stn => `stations.high.${stn}`), `stations.low.${options.terminatingStationCode}`]),
      )
    }

    if (options.transportType === 'train') {
      files.push('this train has', `coaches.${options.coaches}`)
    }

    if (options.seating && options.seating !== 'none') {
      files.push(`seating.${options.seating}`)
    }

    if (options.special) {
      files.push(...options.special.map(s => ({ id: `special.${s}`, opts: { delayStart: 750 } })))
    }

    await this.playAudioFiles(files, download)
  }

  private async playThroughTrainAnnouncement(options: IThroughTrainAnnouncementOptions, download: boolean = false): Promise<void> {
    const files: AudioItem[] = []

    files.push(
      `the ${options.transportType} now approaching`,
      `platforms.high.${options.platform}`,
      'does not stop here',
      { id: 'please stand well clear of the edge of', opts: { delayStart: 400 } },
      `platforms.low.${options.platform}`,
    )

    await this.playAudioFiles(files, download)
  }

  private async playDisruptedTrainAnnouncement(options: IDelayedTrainAnnouncementOptions, download: boolean = false): Promise<void> {
    const { delayTime, disruptionReason, disruptionType, platform } = options
    const files: AudioItem[] = []

    if (disruptionType === 'cancelled') {
      files.push('may i have your attention please on', `platforms.low.${platform}`)
    }

    files.push(
      disruptionType === 'delayed' ? 'we are sorry that the' : { id: 'we are sorry to announce that the', opts: { delayStart: 250 } },
      ...this.assembleTrainInfo({ ...options, destAllHigh: true, delayStart: 100 }),
    )

    if (disruptionType === 'delayed') {
      if (delayTime === 'unknown') {
        files.push('is delayed')
      } else {
        files.push('is delayed by approximately', `delay-times.${delayTime} ${delayTime === '1' ? 'minute' : 'minutes'}`)
      }
    } else if (disruptionType === 'cancelled') {
      files.push({ id: 'has been cancelled', opts: { delayStart: 100 } })
    }

    if (disruptionReason !== 'unknown') {
      files.push({ id: 'this is due to', opts: { delayStart: 500 } }, `disruption-reasons.${disruptionReason}`)
    }

    if (disruptionType === 'delayed' && delayTime === 'unknown') {
      files.push('please listen for further announcements')
    }

    // Only play if delay time is known or is cancelled, else the faster alternate services are not actually known
    if ((delayTime !== 'unknown' || disruptionType === 'cancelled') && options.alternativeServices.length > 0) {
      options.alternativeServices.forEach(alternativeService => {
        const { hour, minute, platform, terminatingCrs, via } = alternativeService.service

        files.push(
          { id: 'passengers for', opts: { delayStart: 400 } },
          ...this.pluraliseAudio(alternativeService.passengersFor.map(stop => `stations.high.${stop.crsCode}`)),
          'your next fastest direct service is now expected to be the',
          `times.hour.${hour}`,
          `times.mins.${minute}`,
          'to',
        )

        if (via !== 'none') {
          files.push(`stations.high.${terminatingCrs}`, 'via', `stations.low.${via}`)
        } else {
          files.push(`stations.low.${terminatingCrs}`)
        }

        files.push('departing from', { id: `platforms.low.${platform}`, opts: { delayStart: 100 } })
      })
    }

    await this.playAudioFiles(files, download)
  }

  readonly customAnnouncementTabs: Record<string, CustomAnnouncementTab> = {
    nextTrain: {
      name: 'Next train',
      component: CustomAnnouncementPane,
      props: {
        playHandler: this.playNextTrainAnnouncement.bind(this),
        presets: AnnouncementPresets.nextTrain,
        options: {
          platform: {
            name: 'Platform',
            default: AVAILABLE_PLATFORMS[0],
            options: AVAILABLE_PLATFORMS.concat(ADDITIONAL_LOCATIONS).map(p => ({ title: p, value: p })),
            type: 'select',
          },
          hour: {
            name: 'Hour',
            default: AVAILABLE_HOURS[0],
            options: AVAILABLE_HOURS.map(h => ({ title: h, value: h })),
            type: 'select',
          },
          min: {
            name: 'Minute',
            default: AVAILABLE_MINUTES[0],
            options: AVAILABLE_MINUTES.map(m => ({ title: m, value: m })),
            type: 'select',
          },
          toc: {
            name: 'TOC',
            default: AVAILABLE_TOCS[0].toLowerCase(),
            options: AVAILABLE_TOCS.map(m => ({ title: m, value: m.toLowerCase() })),
            type: 'select',
          },
          terminatingStationCode: {
            name: 'Terminating station',
            default: AVAILABLE_STATIONS.low[0],
            options: AllStationsTitleValueMap.filter(s => AVAILABLE_STATIONS.low.includes(s.value)),
            type: 'select',
          },
          via: {
            name: 'Via... (optional)',
            default: 'none',
            options: [{ title: 'NONE', value: 'none' }, ...AllStationsTitleValueMap.filter(s => AVAILABLE_STATIONS.low.includes(s.value))],
            type: 'select',
          },
          callingAt: {
            name: '',
            type: 'custom',
            component: CallingAtSelector,
            props: {
              availableStations: AVAILABLE_STATIONS.high,
            },
            default: [],
          },
          coaches: {
            name: 'Formation',
            default: '12 coaches',
            options: AVAILABLE_COACHES_CARRIAGES.map(c => ({ title: c, value: c })),
            type: 'select',
            onlyShowWhen: state => state.transportType === 'train',
          },
          seating: {
            name: 'Seating availability',
            default: 'none',
            options: [{ title: '(not stated)', value: 'none' }, ...AVAILABLE_SEATING_AVAILABILITY.map(c => ({ title: c, value: c }))],
            type: 'select',
          },
          special: {
            name: 'Special remarks',
            default: [],
            options: AVAILABLE_SPECIAL_REMARKS,
            type: 'multiselect',
          },
          transportType: {
            name: 'Transport type',
            default: AVAILABLE_TRANSPORT[0],
            options: AVAILABLE_TRANSPORT.map(t => ({ title: t, value: t })),
            type: 'select',
          },
        },
      },
    },
    fastTrain: {
      name: 'Fast train',
      component: CustomAnnouncementPane,
      props: {
        playHandler: this.playThroughTrainAnnouncement.bind(this),
        options: {
          platform: {
            name: 'Platform',
            default: AVAILABLE_PLATFORMS[0],
            options: AVAILABLE_PLATFORMS.concat(ADDITIONAL_LOCATIONS).map(p => ({ title: p, value: p })),
            type: 'select',
          },
          transportType: {
            name: 'Transport type',
            default: AVAILABLE_TRANSPORT[0],
            options: AVAILABLE_TRANSPORT.map(t => ({ title: t, value: t })),
            type: 'select',
          },
        },
      },
    },
    disruptedTrain: {
      name: 'Delayed/cancelled train',
      component: CustomAnnouncementPane,
      props: {
        playHandler: this.playDisruptedTrainAnnouncement.bind(this),
        presets: AnnouncementPresets.disruptedTrain,
        options: {
          hour: {
            name: 'Hour',
            default: AVAILABLE_HOURS[0],
            options: AVAILABLE_HOURS.map(h => ({ title: h, value: h })),
            type: 'select',
          },
          min: {
            name: 'Minute',
            default: AVAILABLE_MINUTES[0],
            options: AVAILABLE_MINUTES.map(m => ({ title: m, value: m })),
            type: 'select',
          },
          toc: {
            name: 'TOC',
            default: AVAILABLE_TOCS[0].toLowerCase(),
            options: AVAILABLE_TOCS.map(m => ({ title: m, value: m.toLowerCase() })),
            type: 'select',
          },
          terminatingStationCode: {
            name: 'Terminating station',
            default: AVAILABLE_STATIONS.high[0],
            options: AllStationsTitleValueMap.filter(s => AVAILABLE_STATIONS.high.includes(s.value)),
            type: 'select',
          },
          via: {
            name: 'Via... (optional)',
            default: 'none',
            options: [{ title: 'NONE', value: 'none' }, ...AllStationsTitleValueMap.filter(s => AVAILABLE_STATIONS.high.includes(s.value))],
            type: 'select',
          },
          disruptionType: {
            name: '',
            type: 'custom',
            default: 'delayed',
            component: ({ value, onChange }) => {
              return (
                <fieldset>
                  <legend>Disruption type</legend>
                  <input
                    type="radio"
                    id="disruptionTypeDelay"
                    checked={value === 'delayed'}
                    name="disruptionType"
                    onChange={e => {
                      if (e.target.checked) {
                        onChange('delayed')
                      }
                    }}
                  />
                  <label htmlFor="disruptionTypeDelay">Delay</label>
                  <input
                    type="radio"
                    id="disruptionTypeCancel"
                    checked={value === 'cancelled'}
                    name="disruptionType"
                    onChange={e => {
                      if (e.target.checked) {
                        onChange('cancelled')
                      }
                    }}
                  />
                  <label htmlFor="disruptionTypeCancel">Cancelled</label>
                </fieldset>
              )
            },
            props: {},
          },
          delayTime: {
            name: '',
            type: 'custom',
            // default: 'unknown',
            default: AVAILABLE_DELAY_TIMES[0].toString(),
            component: ({ activeState, value, onChange, availableDelayTimes }) => {
              if (activeState.disruptionType !== 'delayed') {
                return null
              }

              return (
                <label>
                  Delay time
                  <select
                    value={value}
                    onChange={e => {
                      onChange(e.target.value)
                    }}
                  >
                    {availableDelayTimes.map(d => (
                      <option key={d.value} value={d.value}>
                        {d.title}
                      </option>
                    ))}
                  </select>
                </label>
              )
            },
            props: {
              availableDelayTimes: [
                { title: 'Unknown', value: 'unknown' },
                ...AVAILABLE_DELAY_TIMES.map(h => ({ title: `${h} minute(s)`, value: h.toString() })),
              ],
            },
          },
          platform: {
            name: '',
            type: 'custom',
            default: AVAILABLE_PLATFORMS[0],
            component: ({ activeState, value, onChange, availablePlatforms }) => {
              if (activeState.disruptionType !== 'cancelled') {
                return null
              }

              return (
                <label>
                  Platform
                  <select
                    value={value}
                    onChange={e => {
                      onChange(e.target.value)
                    }}
                  >
                    {availablePlatforms.map(d => (
                      <option key={d.value} value={d.value}>
                        {d.title}
                      </option>
                    ))}
                  </select>
                </label>
              )
            },
            props: {
              availablePlatforms: AVAILABLE_PLATFORMS.concat(ADDITIONAL_LOCATIONS).map(p => ({ title: p, value: p })),
            },
          },
          disruptionReason: {
            name: 'Delay reason',
            default: 'unknown',
            options: [{ title: 'Unknown', value: 'unknown' }, ...AVAILABLE_DISRUPTION_REASONS.map(h => ({ title: h, value: h.toLowerCase() }))],
            type: 'select',
          },
          alternativeServices: {
            name: '',
            type: 'custom',
            component: AtosDisruptionAlternatives,
            props: {
              availableStations: AVAILABLE_STATIONS,
              hours: AVAILABLE_HOURS,
              mins: AVAILABLE_MINUTES,
              platforms: AVAILABLE_PLATFORMS,
            },
            default: [],
          },
        },
      },
    },
    announcementButtons: {
      name: 'Other announcements',
      component: CustomButtonPane,
      props: {
        buttonSections: {
          General: [createAnnouncementButton(this.playAudioFiles.bind(this), 'BTP 61016', ['61016'])],
          'GTR custom announcements': [
            createAnnouncementButton(this.playAudioFiles.bind(this), 'Doors will close 30s before departure', [
              {
                id: 'gtr - doors will be closed and locked 30s prior',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), 'If you feel unwell, give staff a shout', [
              {
                id: 'gtr - if youre feeling unwell stay on the platform and give one of our colleagues a shout',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), 'Remain behind the yellow line', [
              {
                id: 'gtr - remain behind yellow line for safety',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), 'Surfaces may be slippery', [
              {
                id: 'gtr - slippery conditions',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), 'Very cold weather', [
              {
                id: 'gtr - very cold weather take care',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), 'Wear a face covering if you can', [
              {
                id: 'gtr - wear face covering if you can',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
          ],
          'GTR engineering works': [
            createAnnouncementButton(this.playAudioFiles.bind(this), '6/7 Nov 2021 - Three Bridges', [
              {
                id: 'gtr - 6 7 nov 2021 - engineering works three bridges',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
            createAnnouncementButton(this.playAudioFiles.bind(this), '28 May 2021 - No trains London Victoria', [
              {
                id: 'gtr - 28 may 2021 - this bank holiday no southern trains victoria',
                opts: { customPrefix: 'station/atos/custom' },
              },
            ]),
          ],
        },
      },
    },
  }
}
